<%-include('../user/userLayout/userHeader.ejs') %>
  <style>
    /* Styling for coupon details */
.coupon-details {
  background-color: #f8f9fa;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.coupon-details h5 {
  font-size: 18px;
  font-weight: bold;
  color: #333;
}

.coupon-details p {
  margin-bottom: 5px;
  font-size: 14px;
  color: #555;
}

.coupon-details button {
  margin-top: 10px;
}

    .form-outline small {
      visibility: hidden;
    }

    .form-outline {
      position: relative;
    }

    .form-outline i {
      position: absolute;
      top: 39px;
      right: 10px;
      visibility: hidden;
    }

    .form-outline.success label {
      color: #2ecc71;
      visibility: visible;
    }

    .form-outline.success i.fa-check-circle {
      color: #2ecc71;
      visibility: visible;
    }

    .form-outline.error i.fa-exclamation-circle {
      color: #e74c3c;
      visibility: visible;
    }

    .form-outline.error small {
      color: #e74c3c;
      visibility: visible;
    }

    .payment-method {
      border-radius: 10px;
      transition: background-color 0.3s ease;
    }

    .payment-method:hover {
      opacity: 0.8;
    }
  </style>
  <nav class="custom-navbar navbar navbar navbar-expand-md navbar-dark bg-dark" arial-label="Furni navigation bar">

    <div class="container">
      <a class="navbar-brand" href="/">.<span class="text-warning">f</span>-Wear</a>

      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsFurni"
        aria-controls="navbarsFurni" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarsFurni">
        <ul class="custom-navbar-nav navbar-nav ms-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/shop">Shop</a>
          </li>
          <li><a class="nav-link" href="about.html">About us</a></li>
          <li><a class="nav-link" href="services.html">Services</a></li>
        </ul>

        <ul class="custom-navbar-cta navbar-nav mb-2 mb-md-0 ms-5">
          <!-- <li><a class="nav-link" href="userLogin"><img src="/assets/images/user.svg"></a></li> -->
          <li><a class="nav-link" href="/cartPage"><img src="/assets/images/cart.svg"></a></li>
          <li>
						<a class="nav-link" href="/wishList" style="position: relative;">
							<span class="material-symbols-outlined me-2" style="color: white;">
								favorite
							</span>
						</a>
					</li>
          <li><a class="nav-link" href="/userAccount"> <img src="/assets/images/user.svg"></a></li>
        </ul>
      </div>
    </div>

  </nav>
  <div class="untree_co-section">
    <div class="container">
      <div class="row">
        <div class="col-md-6 mb-5 mb-md-0">
          <h2 class="h3 mb-3 text-black">Shipping Address</h2>
          <% if(!userAddress || !userAddress.details || userAddress.details.length===0) { %>
            <form action="/address/checkout" method="post" id="form">
              <div class="p-3 p-lg-5 border bg-white">
                <div class="form-group">
                  <div class="form-outline">
                    <% if(locals.alert){ %>
                      <p class="text-center text-danger" id="alert">
                        <%= alert %>
                      </p>
                      <% } %>
                        <label for="c_country" class="text-black">Country <span class="text-danger">*</span></label>
                        <small>Error message</small>
                        <input type="text" class="form-control" id="c_name" name="c_name">
                  </div>
                  <div class="form-group row">
                    <div class="form-outline">
                      <label for="c_fname" class="text-black">First Name <span class="text-danger">*</span></label>
                      <small>Error message</small>
                      <input type="text" class="form-control" id="c_fname" name="c_fname">
                    </div>
                    <div class="form-outline">
                      <label for="c_lname" class="text-black">Last Name <span class="text-danger">*</span></label>
                      <small>Error message</small>
                      <input type="text" class="form-control" id="c_lname" name="c_lname">
                    </div>
                  </div>
                  <div class="form-group row">
                    <div class="col-md-12 form-outline">
                      <label for="c_address" class="text-black">Address <span class="text-danger">*</span></label>
                      <small>Error message</small>
                      <input type="text" class="form-control" id="c_address" name="c_address"
                        placeholder="Street address">
                    </div>
                  </div>
                  <div class="form-group row">
                    <div class="col-md-6 form-outline">
                      <label for="c_state_country" class="text-black">State <span class="text-danger">*</span></label>
                      <small>Error message</small>
                      <input type="text" class="form-control" id="c_state" name="c_state">
                    </div>
                    <div class="col-md-6 form-outline">
                      <label for="c_postal_zip" class="text-black">Pincode<span class="text-danger">*</span></label>
                      <small>Error message</small>
                      <input type="text" class="form-control" id="c_pincode" name="c_pincode">
                    </div>
                  </div>
                  <div class="col-md-6 form-outline">
                    <label for="c_phone" class="text-black">Phone <span class="text-danger">*</span></label>
                    <small>Error message</small>
                    <input type="text" class="form-control" id="c_phone" name="c_phone" placeholder="Phone Number">
                  </div>
                  <button class="btn btn-primary mt-5" type="submit">Submit</button>
                  <input class="form-check-input" type="checkbox" id="addressCheckbox<%= 1 %>" name="address" hidden
                    checked>
                </div>
              </div>
            </form>
            <% } else { %>
              <% userAddress.details.forEach((element,index)=> { %>
                <div class="row mb-3">
                  <div class="col-lg-6">
                    <div class="card mb-3 mb-lg-0">
                      <div class="card-body">
                        <!-- Checkbox -->
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" id="addressCheckbox<%= index %>"
                            name="address" value="<%= element._id %>" onclick="selectAddress('<%= index %>')"
                            <%=index===0 ? 'checked' : '' %>>
                        </div>

                        <!-- Address details -->
                        <address>
                          <%= element.firstName %>
                            <%= element.lastName %><br>
                              <%= element.address %>,<br>
                                <%= element.pincode %>. <br>
                                  <%= element.state %>, <%= element.country %>
                        </address>
                      </div>
                    </div>
                  </div>
                </div>
                <% }) %>
                  <% } %>
        </div>
        <div class="col-md-6">
          <div class="row mb-5">
            <div class="col-md-12">
              <h2 class="h3 mb-3 text-black">Coupon Code</h2>
              <div class="p-3 p-lg-5 border bg-white">

                <label for="c_code" class="text-black mb-3">Click the button to apply coupon</label>
                <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#exampleModal">
                  Add Coupon
                </button>

              </div>
            </div>
          </div>
            <div class="row mb-5">
              <div class="col-md-12">
                <h2 class="h3 mb-3 text-black">Your Order</h2>
                <div class="p-3 p-lg-5 border bg-white">
                  <table class="table site-block-order-table mb-5">
                    <thead>
                      <th>Product</th>
                      <th>Qty</th>
                      <th>Total</th>
                    </thead>
                    <tbody>
                      <% userCart.items.forEach(items=> { %>
                        <tr>
                          <td>
                            <%= items.product.product_title %>
                          </td>
                          <td>
                            <%= items.quantity %>
                          </td>
                          <td> &#8377; <%= items.price %>
                          </td>
                        </tr>
                        <% }) %>
                          <tr class="text-end">
                            <td class="text-black font-weight-bold text-en"><strong>Total:</strong></td>
                            <td class="text-black font-weight-bold ">
                              <%= userCart.totalPrice %>
                            </td>
                          </tr>
                          <tr class="text-end">
                            <td class="text-black font-weight-bold text-en"><strong>Delivery charge:</strong></td>
                            <td class="text-black font-weight-bold "><strong>50</strong></td>
                          </tr>
                          <tr class="text-end d-flex justify-content-between" id="couponDetails">
                          </tr>
                          <tr class="text-end">
                            <td class="text-black font-weight-bold text-en"><strong>Grand Total:</strong></td>
                            <td class="font-weight-bold" id="grandTotal"><strong>
                                <%= grandTotal %>
                              </strong></td>
                            <input type="hidden" id="couponId">
                          </tr>
                    </tbody>
                  </table>
                  <div class="mb-5 text-center">
                    <h4 class="text-dark mb-3">Payment method</h4>
                    <div class="border p-3 mb-3 payment-method" style="background-color:rgb(38, 44, 45);">
                      <h3 class="h6 mb-0"><a class="d-block text-decoration-none text-light" data-bs-toggle="collapse"
                          role="button" aria-expanded="false" aria-controls="collapsebank" onclick="cashOnDelivery()">Cash
                          On Delivery</a></h3>
                    </div>
                    <div class="border p-3 mb-3 payment-method" style="background-color:rgb(38, 44, 45);">
                      <h3 class="h6 mb-0"><a class="d-block text-decoration-none text-light" data-bs-toggle="collapse"
                          role="button" aria-expanded="false" aria-controls="collapsecheque"
                          onclick="razorPay()">Razorpay</a></h3>
                    </div>
                    <div class="border p-3 mb-5 payment-method" style="background-color:rgb(38, 44, 45);">
                      <h3 class="h6 mb-0"><a class="d-block text-decoration-none text-light" data-bs-toggle="collapse"
                          role="button" aria-expanded="false" aria-controls="collapsepaypal" onclick="wallet()">Wallet</a></h3>
                    </div>
                  </div>
                </div>
              </div>
            </div>
        </div>
      </div>
      <!-- </form> -->
    </div>
  </div>
  <!-- Modal -->
  <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header bg-dark text-light">
          <h5 class="modal-title" id="exampleModalLabel">Coupon Details</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <% if (couponToUser.length === 0) { %>
          <p class="text-muted">No coupons available for you.</p>
          <% } else { %>
          <% couponToUser.forEach(function(coupon) { %>
          <div class="card mb-2">
            <div class="card-body">
              <h5 class="card-title">Coupon Code: <%= coupon.coupon_code %></h5>
              <p class="card-text mb-0">Minimum Amount: <%= coupon.minimumAmount %></p>
              <p class="card-text mb-0">Maximum Discount: <%= coupon.maximumAmount %></p>
              <p class="card-text">Expiry Date: <%= coupon.expiryDate.toDateString() %></p>
              <button class="btn btn-dark btn-sm" onclick="checkCoupon('<%= coupon._id %>')" data-bs-dismiss="modal">Apply</button>
            </div>
          </div>
          <% }); %>
          <% } %>
        </div>
      </div>
    </div>
  </div>
    <script>
      async function checkCoupon(couponId) {
  try {
    const response = await fetch(`/checkCoupon`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponId })
    });
    const data = await response.json();
    const grandTotal = document.getElementById('grandTotal');
    grandTotal.className = 'text-success';
    grandTotal.style.fontWeight = 'bold'; 
    grandTotal.innerText = data.totalAmount;

    const couponDetails = document.getElementById('couponDetails');
    couponDetails.innerHTML = `
      <p class="text-success">you saved <b>&#x20B9;${data.discountAmount}</b> with '${data.couponCode}'</p> <span type="button" class="material-symbols-outlined text-danger" onclick="removeCoupon()">
cancel
</span>
    `;
    document.getElementById('couponId').innerText = data.couponId;
  } catch (error) {
    console.error(error);
  }
}
async function removeCoupon(params) {
 location.reload()
}

      async function cashOnDelivery(params) {
        
        const grandTotal = document.getElementById('grandTotal').innerText
        const selectedAddressElement = document.querySelector('input[name="address"]:checked');
        const couponElement = document.getElementById('couponId');
        if (!selectedAddressElement) {
          const alert = Swal.fire({
            icon: "warning",
            title: "Oops...",
            text: "Please select an address before placing the order.",
          });
          return alert;
        }
        if (grandTotal > 1000) {
          const alert = Swal.fire({
            icon: "warning",
            title: "Can't order",
            text: "Order above Rs 1000 should not be allowed",
          });
          return alert;
        }
        Swal.fire({
          title: "Are you sure?",
          icon: "warning",
          showCancelButton: true,
          cancelButtonColor: "#d33",
          confirmButtonColor: "#00cc00",
          confirmButtonText: "Yes",
          cancelButtonText: "No",
        }).then(async (result) => {
          if (result.isConfirmed) {
            const selectedAddress = selectedAddressElement.value;
            const couponId = couponElement.innerText
            const response = await fetch('/cashOnDelivery', {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ selectedAddress, couponId })
            })
            const data = await response.json();
            Swal.fire({
              title: "Order placed!",
              text: "Your Order has been placed.",
              icon: "success",
              showConfirmButton: false
            });
            setTimeout(() => {
              window.location.href = '/thankYou'
            }, 2000);
          }
        })
      }
      async function wallet(params) {
        const selectedAddressElement = document.querySelector('input[name="address"]:checked');
        const couponElement = document.getElementById('couponId');
        if (!selectedAddressElement) {
          const alert = Swal.fire({
            icon: "warning",
            title: "Oops...",
            text: "Please select an address before placing the order.",
          });
          return alert;
        }
        Swal.fire({
          title: "Are you sure?",
          icon: "warning",
          showCancelButton: true,
          cancelButtonColor: "#d33",
          confirmButtonColor: "#00cc00",
          confirmButtonText: "Yes",
          cancelButtonText: "No",
        }).then(async (result) => {
          if (result.isConfirmed) {
            const selectedAddress = selectedAddressElement.value;
            const couponId = couponElement.innerText
            const response = await fetch('/wallet', {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ selectedAddress, couponId })
            })
            const data = await response.json();
            if (data.success) {
              Swal.fire({
              title: "Order placed!",
              text: "Your Order has been placed.",
              icon: "success",
              showConfirmButton: false
            });
            setTimeout(() => {
              window.location.href = '/thankYou'
            }, 2000);
            } else {
              Swal.fire({
              title: "Can't place order",
              text: data.text,
              icon:data.icon,
              showConfirmButton: false
            });
            setTimeout(() => {
              location.reload()
            }, 2000);
            }
          }
        })
      }
      async function razorPay(params) {
        const grandTotal = document.getElementById('grandTotal').innerText
        const selectedAddressElement = document.querySelector('input[name="address"]:checked');
        const couponElement = document.getElementById('couponId');
        if (!selectedAddressElement) {
          const alert = Swal.fire({
            icon: "warning",
            title: "Oops...",
            text: "Please select an address before placing the order.",
          });
          return alert;
        }
        Swal.fire({
          title: "Are you sure?",
          icon: "warning",
          showCancelButton: true,
          cancelButtonColor: "#d33",
          confirmButtonColor: "#00cc00",
          confirmButtonText: "Yes",
          cancelButtonText: "No",
        }).then(async (result) => {
          if (result.isConfirmed) {
            const selectedAddress = selectedAddressElement.value;
            const couponId = couponElement.innerText
            const response = await fetch('/razorPay', {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ selectedAddress, couponId })
            }).then(response => response.json())
              .then(data => {
                const user = {
                  name: "<%= user.username %>",
                  email: "<%= user.email %>",
                  phone: "<%= user.phone %>"
                };
                const options = {
                  key: "rzp_test_ihsNz6lracNIu3",
                  amount: data.amount,
                  currency: data.currency,
                  order_id: data.id,
                  name: '.f-Wear',
                  description: 'Purchase Description',
                  image: 'https://example.com/logo.png',
                  handler: function (response) {
                    if (response.razorpay_payment_id) {
                      fetch('/orderPlacing', {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ selectedAddress, couponId }),
                      });
                      Swal.fire({
                        title: "Order placed!",
                        text: "Your order has been placed successfully.",
                        icon: "success",
                        showConfirmButton: false
                      });
                      setTimeout(() => {
                        window.location.href = '/thankYou';
                      }, 2000);
                    } else {
                      fetch('/failedOrder', {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ selectedAddress, couponId }),
                      });
                      Swal.fire({
                        title: "Payment failed",
                        text: "Your payment could not be processed. Please try again.",
                        icon: "error",
                        showConfirmButton: true
                      });
                      setTimeout(() => {
                        window.location.href = '/orders';
                      }, 2000);
                    }
                  },
                  prefill: {
                    name: user.name,
                    email: user.email,
                    contact: user.phone
                  },
                  theme: {
                    color: '#3399cc'
                  }
                };
                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                  fetch('/failedOrder', {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedAddress, couponId }),
                  });
                  window.location.href = '/orders';
                });
                rzp.open();
              })
              .catch(error => {
                Swal.fire({
                        title: "Net work error",
                        text: "Your payment could not be processed. Please try again.",
                        icon: "error",
                        showConfirmButton:false
                      });
                      setTimeout(() => {
                      location.reload()
                      }, 2000);
                console.error('Error initiating payment:', error);
              });
          }
        })
      }
      document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('form');
        const c_name = document.getElementById('c_name');
        const c_fname = document.getElementById('c_fname');
        const c_lname = document.getElementById('c_lname');
        const c_address = document.getElementById('c_address');
        const c_state = document.getElementById('c_state');
        const c_pincode = document.getElementById('c_pincode');
        const c_phone = document.getElementById('c_phone');

        form.addEventListener('submit', function (e) {
          e.preventDefault();
          checkInputs();
        });

        function checkInputs() {
          const c_nameValue = c_name.value.trim();
          const c_fnameValue = c_fname.value.trim();
          const c_lnameValue = c_lname.value.trim();
          const c_addressValue = c_address.value.trim();
          const c_stateValue = c_state.value.trim();
          const c_pincodeValue = c_pincode.value.trim();
          const c_phoneValue = c_phone.value.trim();

          // Validating countryname
          if (c_nameValue === '') {
            setErrorFor(c_name, 'Country cannot be blank');
          } else if (/^[a-zA-Z][a-zA-Z0-9_-]{2,15}$/.test(c_nameValue) === false) {
            setErrorFor(c_name, 'Invalid country name,check first letter is cap');
          } else {
            setSuccessFor(c_name);
          }
          // Validating fname
          if (c_fnameValue === '') {
            setErrorFor(c_fname, 'First name cannot be blank');
          } else if (/^[a-zA-Z][a-zA-Z0-9_-]{2,15}$/.test(c_fnameValue) === false) {
            setErrorFor(c_fname, 'Invalid entry');
          } else {
            setSuccessFor(c_fname);
          }
          // Validating lname
          if (c_lnameValue === '') {
            setErrorFor(c_lname, 'Last name cannot be blank');
          } else if (/^[a-zA-Z][a-zA-Z0-9_-]{2,15}$/.test(c_lnameValue) === false) {
            setErrorFor(c_lname, 'Invalid entry');
          } else {
            setSuccessFor(c_lname);
          }

          // Validating address
          if (c_addressValue === '') {
            setErrorFor(c_address, 'Address cannot be blank');
          } else if (/^(?=.*.{7,})[a-zA-Z0-9\s,'-]+$/i.test(c_addressValue) === false) {
            setErrorFor(c_address, 'Is it correct?');
          } else {
            setSuccessFor(c_address);
          }

          // Validating state
          if (c_stateValue === '') {
            setErrorFor(c_state, 'State cannot be blank');
          } else if (/^[a-zA-Z][a-zA-Z0-9_-]{2,15}$/.test(c_stateValue) === false) {
            setErrorFor(c_state, 'Invalid state name');
          } else {
            setSuccessFor(c_state);
          }

          // Validating pincode
          if (c_pincodeValue === '') {
            setErrorFor(c_pincode, 'Pincode cannot be blank');
          } else if (/^[0-9]{6}$/.test(c_pincodeValue) === false) {
            setErrorFor(c_pincode, 'Invalid pincode');
          } else {
            setSuccessFor(c_pincode);
          }
          // Validating phone
          if (c_phoneValue === '') {
            setErrorFor(c_phone, 'Phone cannot be blank');
          } else if (/^[0-9]{10}$/.test(c_phoneValue) === false) {
            setErrorFor(c_phone, 'Invalid phone number');
          } else {
            setSuccessFor(c_phone);
          }

          // Check if all inputs are successful, then submit the form
          if (
            !form.querySelector('.form-outline.error') &&
            c_nameValue &&
            c_fnameValue &&
            c_lnameValue &&
            c_addressValue &&
            c_stateValue &&
            c_pincodeValue &&
            c_phoneValue
          ) {
            form.submit();
          }
        }

        // Handle validation error
        function setErrorFor(input, message) {
          const formOutline = input.parentElement;
          const small = formOutline.querySelector('small');
          small.innerHTML = message;
          formOutline.className = 'form-outline error';
        }

        // Handle validation success
        function setSuccessFor(input) {
          const formOutline = input.parentElement;
          const small = formOutline.querySelector('small');
          small.innerHTML = ''; // Clear any existing error message
          formOutline.className = 'form-outline success';
        }
      });
      setTimeout(() => {
        document.getElementById('alert').style.display = 'none'
      }, 3000);
    </script>
    <%-include('../user/userLayout/userFooter') %>